package pacote_gas;


import java.awt.Color;
import java.awt.Component;
import static java.awt.Frame.MAXIMIZED_BOTH;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import javax.swing.JLabel;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Lucas
 */
public class MenuVendas extends javax.swing.JFrame {
        dados d = new dados();
               
    public MenuVendas() {
        initComponents();
        d.conecta("localhost","db_gas","root","");
        consultaComboMotorista();
        consultaComboPgto();
        consultaComboProduto();
        setIcone();
        linhasColoridas();
//////              TabelaVendas.getTableHeader().getColumnModel().getColumn(0).setMaxWidth(40); // Cd Venda
//////              TabelaVendas.getTableHeader().getColumnModel().getColumn(0).setMinWidth(40);
//
         TabelaVendas.getTableHeader().getColumnModel().getColumn(1).setMaxWidth(80); // Telefone
         TabelaVendas.getTableHeader().getColumnModel().getColumn(1).setMinWidth(80);
//
//        TabelaVendas.getTableHeader().getColumnModel().getColumn(2).setMaxWidth(150); // Nome
//        TabelaVendas.getTableHeader().getColumnModel().getColumn(2).setMinWidth(150);
//
//        TabelaVendas.getTableHeader().getColumnModel().getColumn(3).setMaxWidth(400); // Endereço
          TabelaVendas.getTableHeader().getColumnModel().getColumn(3).setMinWidth(300);
//
//        TabelaVendas.getTableHeader().getColumnModel().getColumn(4).setMaxWidth(200); // Bairro
          TabelaVendas.getTableHeader().getColumnModel().getColumn(4).setMinWidth(120);
//
//        TabelaVendas.getTableHeader().getColumnModel().getColumn(5).setMaxWidth(150); // Obs
          TabelaVendas.getTableHeader().getColumnModel().getColumn(5).setMinWidth(150);
//
          TabelaVendas.getTableHeader().getColumnModel().getColumn(6).setMaxWidth(50); // Valor
          TabelaVendas.getTableHeader().getColumnModel().getColumn(6).setMinWidth(50);
////////
            TabelaVendas.getTableHeader().getColumnModel().getColumn(7).setMaxWidth(50); // Qtd
            TabelaVendas.getTableHeader().getColumnModel().getColumn(7).setMinWidth(50);
//
//          TabelaVendas.getTableHeader().getColumnModel().getColumn(8).setMaxWidth(100);  //Motorista
  //        TabelaVendas.getTableHeader().getColumnModel().getColumn(8).setMinWidth(100);
//
   //       TabelaVendas.getTableHeader().getColumnModel().getColumn(9).setMaxWidth(50);  //Pagamento
     //     TabelaVendas.getTableHeader().getColumnModel().getColumn(9).setMinWidth(50);
//     
//////          TabelaVendas.getTableHeader().getColumnModel().getColumn(10).setMaxWidth(50); // Hora
//////          TabelaVendas.getTableHeader().getColumnModel().getColumn(10).setMinWidth(50);
////////      
//////         TabelaVendas.getTableHeader().getColumnModel().getColumn(11).setMaxWidth(105); // Data
//////         TabelaVendas.getTableHeader().getColumnModel().getColumn(11).setMinWidth(105);
        TabelaV();
        somaVendas();
        bkpVendas();
       TabelaVendas.getTableHeader().setReorderingAllowed(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        telefone = new javax.swing.JTextField();
        endereco = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        bairro = new javax.swing.JTextField();
        nome = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btConfirma = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        comboMotorista = new javax.swing.JComboBox<>();
        comboPgto = new javax.swing.JComboBox<>();
        avisos = new javax.swing.JLabel();
        valor = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        qtd = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        obs = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        n_venda = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        btAltera = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TabelaVendas = new javax.swing.JTable();
        qtVendas = new javax.swing.JLabel();
        qtVendas1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        comboProduto = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Menu de Vendas");

        telefone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                telefoneKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                telefoneKeyTyped(evt);
            }
        });

        endereco.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                enderecoKeyPressed(evt);
            }
        });

        jLabel2.setText("Nome");

        jLabel3.setText("Endereço");

        jLabel4.setText("Bairro");

        bairro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                bairroKeyPressed(evt);
            }
        });

        nome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nomeKeyPressed(evt);
            }
        });

        jLabel5.setText("Telefone");

        btConfirma.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btConfirma.setText("Finalizar Venda");
        btConfirma.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btConfirmaMousePressed(evt);
            }
        });

        jLabel6.setText("Motorista");

        jLabel7.setText("Pagamento");

        comboMotorista.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        comboPgto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        avisos.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        avisos.setText("Seja Bem-Vindo! Boas Vendas!");

        valor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                valorKeyPressed(evt);
            }
        });

        jLabel8.setText("Valor");

        qtd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                qtdKeyPressed(evt);
            }
        });

        jLabel9.setText("Quantidade");

        obs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                obsKeyPressed(evt);
            }
        });

        jLabel10.setText("Observação");

        n_venda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                n_vendaKeyPressed(evt);
            }
        });

        jLabel11.setText("Cod. Venda");

        btAltera.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btAltera.setText("Alterar Venda");
        btAltera.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btAlteraMousePressed(evt);
            }
        });

        TabelaVendas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Cód. Venda", "Telefone", "Nome", "Endereço", "Bairro", "Observação", "Valor", "Qtd", "Produto", "Motorista", "Pagamento", "Hora", "Data"
            }
        )
        {public boolean isCellEditable(int row, int column){return false;}}
    );
    jScrollPane2.setViewportView(TabelaVendas);
    TabelaVendas.getAccessibleContext().setAccessibleName("");

    qtVendas.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
    qtVendas.setForeground(new java.awt.Color(102, 102, 102));
    qtVendas.setText("0");

    qtVendas1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    qtVendas1.setText("Total de vendas hoje:");

    jLabel1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
    jLabel1.setText("easyGas v0.1 beta");

    comboProduto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

    jLabel12.setText("Produto");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jLabel5)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(telefone, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jLabel2)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(nome, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel8)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(valor, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel9)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(qtd, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel10)
                    .addGap(0, 0, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jLabel3)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(31, 31, 31)
                                    .addComponent(jLabel6))
                                .addComponent(comboMotorista, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(comboPgto, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel12)
                                .addComponent(comboProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(endereco)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabel4)))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(layout.createSequentialGroup()
                    .addGap(7, 7, 7)
                    .addComponent(obs, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(10, 10, 10)
                    .addComponent(jLabel11)
                    .addGap(18, 18, 18)
                    .addComponent(n_venda, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(194, 194, 194))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(qtVendas1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(qtVendas, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(146, 146, 146))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(bairro, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 234, Short.MAX_VALUE)
                            .addComponent(btAltera)
                            .addGap(171, 171, 171))))))
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(74, 74, 74)
                    .addComponent(btConfirma, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(47, 47, 47)
                    .addComponent(avisos, javax.swing.GroupLayout.PREFERRED_SIZE, 985, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createSequentialGroup()
                    .addGap(83, 83, 83)
                    .addComponent(jLabel1)))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addComponent(jScrollPane2)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(jLabel1)
            .addGap(9, 9, 9)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(telefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(nome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(obs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10)
                        .addComponent(qtd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9)
                        .addComponent(valor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8)
                        .addComponent(jLabel11)
                        .addComponent(n_venda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bairro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(endereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)))
                .addGroup(layout.createSequentialGroup()
                    .addGap(26, 26, 26)
                    .addComponent(btAltera)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jLabel6)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(comboMotorista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(qtVendas)
                            .addComponent(qtVendas1))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel12)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboPgto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGap(14, 14, 14)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(avisos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btConfirma, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void consultaComboPgto(){
        // Método para preencher o comboBox de Pagamentos
        comboPgto.removeAllItems();  
        ResultSet pgto = d.consulta("select descricao from forma_pgto");
         try {
            while (pgto.next()) {
                comboPgto.addItem(pgto.getString("descricao"));
            }
        } catch (SQLException e) {
            System.out.println(e);
        }
    }
    
    private void consultaComboMotorista() {
        // Método para preencher o comboBox de Motoristas
        comboMotorista.removeAllItems();
        ResultSet motorista = d.consulta("select nome_motorista from motoristas where status = 'Ativo'");
        try {
            while (motorista.next()) {
                comboMotorista.addItem(motorista.getString("nome_motorista"));
            }
        } catch (SQLException e) {
            System.out.println(e);
        }
    }
    
       private void consultaComboProduto() {
        // Método para preencher o comboBox de Motoristas
        comboProduto.removeAllItems();
        ResultSet motorista = d.consulta("select descricao_prod from produtos where status = 'Ativo'");
        try {
            while (motorista.next()) {
                comboProduto.addItem(motorista.getString("descricao_prod"));
            }
        } catch (SQLException e) {
            System.out.println(e);
        }
    }
    
    private void retornaVenda(){
        String tel = telefone.getText();
        tel = tel.replaceAll("-", "");
        ResultSet vendaAtual = d.consulta("select vendas.telefone,vendas.nome,vendas.endereco,vendas.bairro,vendas.observacao,motoristas.nome_motorista,forma_pgto.descricao,vendas.valor,vendas.qtd,produtos.descricao_prod from vendas,produtos,motoristas,forma_pgto where vendas.id_produto = produtos.id_produto and vendas.id_motorista = motoristas.id_motorista and vendas.id_pgto = forma_pgto.id_pgto and id_venda = " + n_venda.getText() + "");
        
        try{
        if(vendaAtual.next()){ // Retorna os dados do SELECT pelo ID da VENDA.
            btConfirma.setEnabled(false);
            avisos.setText("Retornando os dados da venda solicitada!");
            telefone.setText(vendaAtual.getString("telefone"));
            nome.setText(vendaAtual.getString("nome"));
            endereco.setText(vendaAtual.getString("endereco"));
            bairro.setText(vendaAtual.getString("bairro"));
            obs.setText(vendaAtual.getString("observacao"));
            comboMotorista.setSelectedItem(vendaAtual.getString("nome_motorista"));
            comboPgto.setSelectedItem(vendaAtual.getString("descricao"));
            valor.setText(vendaAtual.getString("valor"));
            qtd.setText(vendaAtual.getString("qtd"));  
            comboProduto.setSelectedItem(vendaAtual.getString("descricao_prod"));
        } else if (!vendaAtual.next()){ // Caso nenhuma venda seja encontrada. 
            avisos.setText("Erro: Venda não encontrada, verifique se essa venda existe!");
            btConfirma.setEnabled(true);
            telefone.setText("");
            nome.setText("");
            endereco.setText("");
            bairro.setText("");
            obs.setText("");
            valor.setText("");
            qtd.setText("");  
            n_venda.setText("");
            n_venda.requestFocus();
        }   
        } catch (SQLException e){
            System.out.println(e);
        }
    }
    
    private void atualizaVenda(){
        String telDigitado = telefone.getText();
        telDigitado = telDigitado.replaceAll("-", "");
       
        try{ 
           ResultSet telefoneB = d.consulta("select telefone from vendas where id_venda ="+n_venda.getText()+"");
              telefoneB.next();
              String telefoneBanco = telefoneB.getString("telefone");
                       
            if (!telDigitado.equals(telefoneBanco)){
                     avisos.setText("Erro: Digite o número de telefone do cliente desta venda corretamente!");      
                      } else {
                           if (valor.getText().isEmpty()){
                              avisos.setText("Preencha o campo de valor!");
                              valor.requestFocus();
                          } else if(qtd.getText().isEmpty()){
                              avisos.setText("Preencha o campo de quantidade!"); 
                              qtd.requestFocus();
                          } else if(nome.getText().isEmpty()){
                              avisos.setText("Preencha o campo de nome!");
                              nome.requestFocus();
                          } else if(endereco.getText().isEmpty()){
                              avisos.setText("Preencha o campo de endereço!");
                              endereco.requestFocus();
                          } else if(bairro.getText().isEmpty()){
                              avisos.setText("Preencha o campo de bairro!");
                              bairro.requestFocus();
                          } else if(telefone.getText().isEmpty()){
                              avisos.setText("Preencha o campo de telefone!");   
                              telefone.requestFocus();
        } else {      
        //Consulta o nome,endereço e bairro na tabela clientes.    
        ResultSet dadosBanco = d.consulta("select nome,endereco,bairro from clientes where telefone = '" + telDigitado + "'");
        if(dadosBanco.next()){
        String nomeBanco = dadosBanco.getString("nome");
        String endBanco = dadosBanco.getString("endereco"); // Seta os valores do banco nas Strings nomeBanco,endBanco,bairroBanco.
        String bairroBanco = dadosBanco.getString("bairro");
        String nomeDigitado = nome.getText();
        String endDigitado = endereco.getText(); // Pega os valores digitado pelo usuário.
        String bairroDigitado = bairro.getText();
        
        if(!nomeBanco.equals(nomeDigitado)){ // Se o nome digitado não for igual ao do banco, o nome digitado vai para a tabela clientes.
          d.atualizaClientes("clientes", "nome='"+nomeDigitado+"'","telefone='"+telDigitado+"'");
          JOptionPane.showMessageDialog(this, "Nome do cliente alterado no banco.");
        }
        if(!endBanco.equals(endDigitado)){ // Se o endereço digitado não for igual ao do banco, o endereço digitado vai para a tabela clientes.
          d.atualizaClientes("clientes", "endereco='"+endDigitado+"'","telefone='"+telDigitado+"'");   
          JOptionPane.showMessageDialog(this, "Endereço do cliente alterado no banco.");
        }
        if(!bairroBanco.equals(bairroDigitado)){ // Se o bairro digitado não for igual ao do banco, o bairro digitado vai para a tabela clientes.
          d.atualizaClientes("clientes", "bairro='"+bairroDigitado+"'","telefone='"+telDigitado+"'");   
          JOptionPane.showMessageDialog(this, "Bairro do cliente alterado no banco.");
        }
        }

         //Pega o ID do motorista pelo nome no comboBox
         ResultSet comboMoto = d.consulta("select id_motorista from motoristas where nome_motorista = '" + comboMotorista.getSelectedItem() + "'");
         comboMoto.next();
         int cMoto = comboMoto.getInt("id_motorista");
         //Pega o ID do pagamento pelo nome no comboBox
          ResultSet comboPagamento = d.consulta("select id_pgto from forma_pgto where descricao = '" + comboPgto.getSelectedItem() + "'");
         comboPagamento.next();
         int cPgto = comboPagamento.getInt("id_pgto");
        
          ResultSet valorQV = d.consulta("select valor, qtd from vendas where id_venda = '" + n_venda.getText()+ "'");
          valorQV.next();
          String valorBanco = valorQV.getString("valor");
          String bancoQtd = valorQV.getString("qtd");
          String valorD = valor.getText();
          String QtdDigitado = qtd.getText();
          
          if (!bancoQtd.equals(QtdDigitado) && valorBanco.equals(valorD)){
       if (!valor.getText().isEmpty() && !qtd.getText().isEmpty()){
              int totalQt = Integer.valueOf(valorBanco) / Integer.valueOf(bancoQtd);
              valor.setText(String.valueOf(totalQt));
               int valorDigitado = Integer.valueOf(valor.getText());        
               int quantidadeDigitada = Integer.valueOf(qtd.getText());
               int valorT = valorDigitado * quantidadeDigitada;  
               valor.setText(Integer.toString(valorT));
         }
       }  
          if(!valorBanco.equals(valorD)){   
        if (!valor.getText().isEmpty() && !qtd.getText().isEmpty()){ //Se o campo VALOR e o campo QUANTIDADE não estiveram vázios,
               int valorDigitado = Integer.valueOf(valor.getText());        //É realizado o cálculo, retornando o valor total.
               int quantidadeDigitada = Integer.valueOf(qtd.getText());
               int valorT = valorDigitado * quantidadeDigitada;  
               valor.setText(Integer.toString(valorT));
           }
         } 
          

         //Atualiza a Venda.
         if(d.atualizaClientes("vendas", "nome='"+nome.getText()+"',endereco='"+endereco.getText()+"',bairro='"+bairro.getText()+"',observacao='"+obs.getText()+"',id_motorista="+cMoto+",valor='"+valor.getText()+"',qtd='"+qtd.getText()+"',id_pgto="+cPgto+"","id_venda='"+n_venda.getText()+"'")){
             avisos.setText("Venda alterada!");
             limpaTodosCampos();
             TabelaV();
             somaVendas();
             rolaScroll();
             btConfirma.setEnabled(true);
         } 
        }
                 }
        } catch(SQLException e){
            System.out.println(e);
        }
    }
    
    public void somaVendas(){
         DefaultTableModel modelotabela = (DefaultTableModel) TabelaVendas.getModel();
        String data = new SimpleDateFormat("dd/MM/yy").format(Calendar.getInstance().getTime()); 
      
        int subtot = 0;  
      
        // Pega valores da coluna Quantidade.
        for (int i = 0; i < modelotabela.getRowCount(); i++) {
              String valorData = (modelotabela.getValueAt(i, 11).toString());  // Pega o campo Data.
              String valorObs = (modelotabela.getValueAt(i, 5).toString());  // Pega o campo Observação.
               if(valorData.equals(data) && (!valorObs.contains("canc") && !valorObs.contains("CANC") && !valorObs.contains("Canc") && !valorObs.contains("ass") && !valorObs.contains("Ass") && !valorObs.contains("ASS"))){ 
            String valorQtd = (modelotabela.getValueAt(i, 7).toString()); // Função para somar o campo Quantidade.
            int stot = Integer.parseInt(valorQtd);
            subtot = subtot + stot;
          }
         }
         qtVendas.setText(String.valueOf(subtot));
         rolaScroll();
    }
    
    private void bkpVendas(){
         String mesAtual = new SimpleDateFormat("MM").format(Calendar.getInstance().getTime());   // Pega mês atual.                          
         String diaAtual = new SimpleDateFormat("dd").format(Calendar.getInstance().getTime()); // Pega dia atual.
         try{                  
             ResultSet dataConsulta = d.consulta("select mes_bkp from bkp"); // Consulta a data do ultimo mês que foi feito um backup.
             dataConsulta.next();
             String mesConsulta = dataConsulta.getString("mes_bkp"); // Pega o valor do mês como String.
             
             if(diaAtual.equals("01")){ // Se o dia Atual for igual a 01.
                if(!mesConsulta.equals(mesAtual)){ // Se o mês consultado, não for igual ao mês atual.
                        TabelaBkp();
                        DefaultTableModel modelotabela = (DefaultTableModel) TabelaVendas.getModel();
                        for (int i = 0; i < modelotabela.getRowCount(); i++) {
                        String idVenda = (modelotabela.getValueAt(i, 0).toString());  // pega o Id da venda.
                        String telefone = (modelotabela.getValueAt(i, 1).toString());  // Pega o telefone.
                        String nome = (modelotabela.getValueAt(i, 2).toString());  // Pega o nome.
                        String endereco = (modelotabela.getValueAt(i, 3).toString());  // Pega o endereço.             
                        String bairro = (modelotabela.getValueAt(i, 4).toString());  // Pega o bairro.
                        String observacao = (modelotabela.getValueAt(i, 5).toString());  // Pega o campo Observação.  
                        String valor = (modelotabela.getValueAt(i, 6).toString());  // Pega o valor.
                        String qt = (modelotabela.getValueAt(i, 7).toString());  // Pega a quantidade.  
                        String produto = (modelotabela.getValueAt(i, 8).toString());  // Pega o nome do motorista.  
                        String nome_motorista = (modelotabela.getValueAt(i, 9).toString());  // Pega o nome do motorista.  
                        String forma_pgto = (modelotabela.getValueAt(i, 10).toString());  // Pega a forma de pgto.  
                        
                        //Pega o ID do motorista pelo nome no comboBox
                        ResultSet comboMoto = d.consulta("select id_motorista from motoristas where nome_motorista = '" + nome_motorista + "'");
                        comboMoto.next();
                        int cMoto = comboMoto.getInt("id_motorista");
                        
                        //Pega o ID do pagamento pelo nome no comboBox
                         ResultSet comboPagamento = d.consulta("select id_pgto from forma_pgto where descricao = '" + forma_pgto + "'");
                        comboPagamento.next();
                        int cPgto = comboPagamento.getInt("id_pgto");
                        
                         //Pega o ID do produto pelo nome no comboBox
                         ResultSet comboProd = d.consulta("select id_produto from produtos where descricao_prod = '" + produto + "'");
                        comboProd.next();
                        int cProd = comboProd.getInt("id_produto");
                        
                        String hora = (modelotabela.getValueAt(i, 11).toString());  // Pega a hora.  
                        String data = (modelotabela.getValueAt(i, 12).toString());  // Pega a data.  
                        
//                        DateFormat saida = new SimpleDateFormat("yyyy-MM-dd");
//                        DateFormat entrada = new SimpleDateFormat("dd/MM/yyyy");
//                        Date date = entrada.parse(data);
//                        String dataSaida = saida.format(date);

            if(d.insereVendaBkp("vendas_bkp", idVenda, telefone, nome, endereco, observacao, bairro, cMoto, data, hora, cProd, valor, qt, cPgto)){
               d.exclui("vendas", "id_venda = " + idVenda + ""); 
            }            
                        
                        }
                        if(d.atualizaClientes("bkp",  "mes_bkp='"+mesAtual+"'","mes_bkp='"+mesConsulta+"'")){
                        TabelaV();
                        JOptionPane.showMessageDialog(this, "Backup feito com sucesso, relatório do Mês passado disponível!");
                        }
                }
                 
             } else if (diaAtual.equals("02")){  // Se o dia Atual for igual a 02.
                if(!mesConsulta.equals(mesAtual)){ // Se o mês consultado, não for igual ao mês atual.
                        TabelaBkp();
                        DefaultTableModel modelotabela = (DefaultTableModel) TabelaVendas.getModel();
                        for (int i = 0; i < modelotabela.getRowCount(); i++) {
                        String idVenda = (modelotabela.getValueAt(i, 0).toString());  // pega o Id da venda.
                        String telefone = (modelotabela.getValueAt(i, 1).toString());  // Pega o telefone.
                        String nome = (modelotabela.getValueAt(i, 2).toString());  // Pega o nome.
                        String endereco = (modelotabela.getValueAt(i, 3).toString());  // Pega o endereço.             
                        String bairro = (modelotabela.getValueAt(i, 4).toString());  // Pega o bairro.
                        String observacao = (modelotabela.getValueAt(i, 5).toString());  // Pega o campo Observação.  
                        String valor = (modelotabela.getValueAt(i, 6).toString());  // Pega o valor.
                        String qt = (modelotabela.getValueAt(i, 7).toString());  // Pega a quantidade.  
                        String produto = (modelotabela.getValueAt(i, 8).toString());  // Pega o nome do motorista.  
                        String nome_motorista = (modelotabela.getValueAt(i, 9).toString());  // Pega o nome do motorista.  
                        String forma_pgto = (modelotabela.getValueAt(i, 10).toString());  // Pega a forma de pgto.  
                        
                        //Pega o ID do motorista pelo nome no comboBox
                        ResultSet comboMoto = d.consulta("select id_motorista from motoristas where nome_motorista = '" + nome_motorista + "'");
                        comboMoto.next();
                        int cMoto = comboMoto.getInt("id_motorista");
                        
                        //Pega o ID do pagamento pelo nome no comboBox
                         ResultSet comboPagamento = d.consulta("select id_pgto from forma_pgto where descricao = '" + forma_pgto + "'");
                        comboPagamento.next();
                        int cPgto = comboPagamento.getInt("id_pgto");
                        
                         //Pega o ID do produto pelo nome no comboBox
                         ResultSet comboProd = d.consulta("select id_produto from produtos where descricao_prod = '" + produto + "'");
                        comboProd.next();
                        int cProd = comboProd.getInt("id_produto");
                        
                        String hora = (modelotabela.getValueAt(i, 11).toString());  // Pega a hora.  
                        String data = (modelotabela.getValueAt(i, 12).toString());  // Pega a data.  
                        
//                        DateFormat saida = new SimpleDateFormat("yyyy-MM-dd");
//                        DateFormat entrada = new SimpleDateFormat("dd/MM/yyyy");
//                        Date date = entrada.parse(data);
//                        String dataSaida = saida.format(date);

            if(d.insereVendaBkp("vendas_bkp", idVenda, telefone, nome, endereco, observacao, bairro, cMoto, data, hora, cProd, valor, qt, cPgto)){
               d.exclui("vendas", "id_venda = " + idVenda + ""); 
            }            
                        
                        }
                        if(d.atualizaClientes("bkp",  "mes_bkp='"+mesAtual+"'","mes_bkp='"+mesConsulta+"'")){
                        TabelaV();
                        JOptionPane.showMessageDialog(this, "Backup feito com sucesso, relatório do Mês passado disponível!");
                        }
                }
         }
                         
         } catch (SQLException e){
             System.out.println(e);
         }  
    }
    
    
    private void telefoneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_telefoneKeyTyped

    }//GEN-LAST:event_telefoneKeyTyped

    private void telefoneKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_telefoneKeyPressed
           if(evt.getKeyCode() == KeyEvent.VK_ENTER){ // Evento caso o enter seja pressionado.
            String valorTel = telefone.getText();
            valorTel = valorTel.replaceAll("-","");
            btConfirma.setEnabled(true);
            int tam = valorTel.length();
                    if(tam <= 7 || tam > 9){ // Checagem se o tamanho do número de telefone informado é inválido.
            avisos.setText("Erro: Número de telefone inválido!");
            JOptionPane.showMessageDialog(this, "Digite um número de telefone válido!");
            nome.setText("");
            endereco.setText("");
            bairro.setText("");
            telefone.setText("");
            valor.setText("");
            qtd.setText("");
            obs.setText("");
            n_venda.setText("");
            telefone.requestFocus();
                    } else if (tam >= 8 || tam < 9 ){ // Caso o número de telefone for válido.
                        
            //Consulta o telefone digitado no banco.            
            ResultSet rs = d.consulta("select nome,endereco,bairro from clientes where telefone = '" + valorTel + "'"); 

            try{
                if(rs.next()){ // Se o cliente já estiver cadastrado, ele trás os dados do cliente nos campos de texto.
                    avisos.setText("Cliente cadastrado!");
                    nome.setText(rs.getString("nome"));
                    endereco.setText(rs.getString("endereco"));
                    bairro.setText(rs.getString("bairro"));
                    valor.setText("");
                    qtd.setText("");
                    obs.setText("");
                    n_venda.setText("");
                } else { // Se o cliente não estiver cadastrado.
                    nome.setText("");
                    endereco.setText("");
                    bairro.setText("");
                    avisos.setText("Cliente não cadastrado, porfavor informe os dados do cliente!");
                    nome.requestFocus();
                    valor.setText("");
                    qtd.setText("");
                    obs.setText("");
                    n_venda.setText("");
                    if(telefone.getText().isEmpty()){ // Realiza checagem se o campo de telefone tem algum telefone digitado.
                        telefone.requestFocus();
                        JOptionPane.showMessageDialog(this, "Porfavor, informe um número de telefone.");
                    }
                   
                }
            } catch(SQLException e){
                System.out.println(e);
            }
        }    
      }
    }//GEN-LAST:event_telefoneKeyPressed

    private void enderecoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_enderecoKeyPressed
    if(evt.getKeyCode() == KeyEvent.VK_ENTER){
        bairro.requestFocus();
    }
    }//GEN-LAST:event_enderecoKeyPressed

    private void nomeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomeKeyPressed
      if(evt.getKeyCode() == KeyEvent.VK_ENTER){
        endereco.requestFocus();
    }
    }//GEN-LAST:event_nomeKeyPressed
    
    private void bairroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bairroKeyPressed
      if(evt.getKeyCode() == KeyEvent.VK_ENTER){ // Evento ENTER do teclado.
      String valor = telefone.getText();
      valor = valor.replaceAll("-", "");
      ResultSet rs = d.consulta("select telefone from clientes where telefone = '" + valor + "'"); //Consulta se o valor digitado já é cadastrado.
      try{
      if(!rs.next()){// Se o cliente não estiver cadastrado, ele é cadastrado.
          //Caso algum campo esteja em branco, o usuário é obrigado a preencher todos os campos.
           if(telefone.getText().isEmpty() || endereco.getText().isEmpty() || nome.getText().isEmpty() || bairro.getText().isEmpty()){
                        JOptionPane.showMessageDialog(this, "Preencha todos os campos, porfavor!");
                        telefone.requestFocus();
                        } else {
          if(d.insereClientes("clientes", valor, endereco.getText(), nome.getText(), bairro.getText())){ //Cliente é cadastrado.
              avisos.setText("Cliente cadastrado!");
              Cadastra_AlteraCli cac = new Cadastra_AlteraCli();
              cac.TabelaClientes();
          } else {
              JOptionPane.showMessageDialog(this, "Erro ao cadastrar!");
          }
         }
      }
      } catch (SQLException e){
          System.out.println(e);
      }
     }
    }//GEN-LAST:event_bairroKeyPressed

    public void TabelaV(){
        DefaultTableModel modelotabela = (DefaultTableModel) TabelaVendas.getModel();
        TabelaVendas.setRowSelectionAllowed(false);
         modelotabela.setNumRows(0);
        
//        TabelaVendas.getColumnModel().getColumn(0).setHeaderValue("Cód. Venda");
//        TabelaVendas.getColumnModel().getColumn(1).setHeaderValue("Telefone");
//        TabelaVendas.getColumnModel().getColumn(2).setHeaderValue("Nome");
//        TabelaVendas.getColumnModel().getColumn(3).setHeaderValue("Endereço");
//        TabelaVendas.getColumnModel().getColumn(4).setHeaderValue("Bairro");
//        TabelaVendas.getColumnModel().getColumn(5).setHeaderValue("Observação");
//        TabelaVendas.getColumnModel().getColumn(6).setHeaderValue("Valor");
//        TabelaVendas.getColumnModel().getColumn(7).setHeaderValue("Quantidade");
//        TabelaVendas.getColumnModel().getColumn(8).setHeaderValue("Motorista");
//        TabelaVendas.getColumnModel().getColumn(9).setHeaderValue("Pagamento");
//        TabelaVendas.getColumnModel().getColumn(10).setHeaderValue("Hora");
//        TabelaVendas.getColumnModel().getColumn(11).setHeaderValue("Data");




        ResultSet rs = d.consulta("select vendas.id_venda,vendas.telefone,vendas.nome,vendas.endereco,vendas.bairro,vendas.observacao,vendas.valor,vendas.qtd,produtos.descricao_prod,motoristas.nome_motorista,forma_pgto.descricao,vendas.hora,date_format(dt, '%d/%m/%y') from vendas,produtos,motoristas,forma_pgto\n" +
"where vendas.id_produto = produtos.id_produto and vendas.id_motorista = motoristas.id_motorista and vendas.id_pgto = forma_pgto.id_pgto ORDER BY id_venda asc");
       
        int linha = 0;
            try {
             while(rs.next()) {
                    modelotabela.addRow(new String[modelotabela.getColumnCount()]);
                    modelotabela.setValueAt(rs.getString("id_venda"), linha, 0);
                    modelotabela.setValueAt(rs.getString("telefone"), linha, 1);
                    modelotabela.setValueAt(rs.getString("nome"), linha, 2);
                    modelotabela.setValueAt(rs.getString("endereco"), linha, 3);
                    modelotabela.setValueAt(rs.getString("bairro"), linha, 4);
                    modelotabela.setValueAt(rs.getString("observacao"), linha, 5);
                    modelotabela.setValueAt(rs.getString("valor"), linha, 6);
                    modelotabela.setValueAt(rs.getString("qtd"), linha, 7);
                    modelotabela.setValueAt(rs.getString("descricao_prod"), linha, 8);     
                    modelotabela.setValueAt(rs.getString("nome_motorista"), linha, 9);
                    modelotabela.setValueAt(rs.getString("descricao"), linha, 10);
                    modelotabela.setValueAt(rs.getString("hora"), linha, 11);
                    modelotabela.setValueAt(rs.getString("date_format(dt, '%d/%m/%y')"), linha, 12);
                    linha++;
                              }
                 }      
            catch (Exception e) {
                    System.err.println("Erro: " + e);
                                }   
         //   modelotabela.setRowCount(0);
    }
    
     public void TabelaBkp(){
        DefaultTableModel modelotabela = (DefaultTableModel) TabelaVendas.getModel();
         modelotabela.setRowCount(0);
        TabelaVendas.setRowSelectionAllowed(false);
    

   //   GuiUtils.scrollToVisible(TabelaVendas, TabelaVendas.getHeight());
  //   GuiUtils.selectAndScroll(TabelaVendas, TabelaVendas.getHeight());
  
      
       //   modelotabela.setColumnCount(12);
         modelotabela.setNumRows(0);
        
//        TabelaVendas.getColumnModel().getColumn(0).setHeaderValue("Cód. Venda");
//        TabelaVendas.getColumnModel().getColumn(1).setHeaderValue("Telefone");
//        TabelaVendas.getColumnModel().getColumn(2).setHeaderValue("Nome");
//        TabelaVendas.getColumnModel().getColumn(3).setHeaderValue("Endereço");
//        TabelaVendas.getColumnModel().getColumn(4).setHeaderValue("Bairro");
//        TabelaVendas.getColumnModel().getColumn(5).setHeaderValue("Observação");
//        TabelaVendas.getColumnModel().getColumn(6).setHeaderValue("Valor");
//        TabelaVendas.getColumnModel().getColumn(7).setHeaderValue("Quantidade");
//        TabelaVendas.getColumnModel().getColumn(8).setHeaderValue("Motorista");
//        TabelaVendas.getColumnModel().getColumn(9).setHeaderValue("Pagamento");
//        TabelaVendas.getColumnModel().getColumn(10).setHeaderValue("Hora");
//        TabelaVendas.getColumnModel().getColumn(11).setHeaderValue("Data");




        ResultSet rs = d.consulta("select vendas.id_venda,vendas.telefone,vendas.nome,vendas.endereco,vendas.bairro,vendas.observacao,vendas.valor,vendas.qtd,produtos.descricao_prod,motoristas.nome_motorista,forma_pgto.descricao,vendas.hora,dt from vendas,produtos,motoristas,forma_pgto\n"
                + "where vendas.id_produto = produtos.id_produto and vendas.id_motorista = motoristas.id_motorista and vendas.id_pgto = forma_pgto.id_pgto ORDER BY id_venda asc;");
       
        int linha = 0;
            try {
             while(rs.next()) {
                    modelotabela.addRow(new String[modelotabela.getColumnCount()]);
                    modelotabela.setValueAt(rs.getString("id_venda"), linha, 0);
                    modelotabela.setValueAt(rs.getString("telefone"), linha, 1);
                    modelotabela.setValueAt(rs.getString("nome"), linha, 2);
                    modelotabela.setValueAt(rs.getString("endereco"), linha, 3);
                    modelotabela.setValueAt(rs.getString("bairro"), linha, 4);
                    modelotabela.setValueAt(rs.getString("observacao"), linha, 5);
                    modelotabela.setValueAt(rs.getString("valor"), linha, 6);
                    modelotabela.setValueAt(rs.getString("qtd"), linha, 7);
                    modelotabela.setValueAt(rs.getString("descricao_prod"), linha, 8);     
                    modelotabela.setValueAt(rs.getString("nome_motorista"), linha, 9);
                    modelotabela.setValueAt(rs.getString("descricao"), linha, 10);
                    modelotabela.setValueAt(rs.getString("hora"), linha, 11);
                    modelotabela.setValueAt(rs.getString("dt"), linha, 12);
                    linha++;
                              }
                 }      
            catch (Exception e) {
                    System.err.println("Erro: " + e);
                                }   
         //   modelotabela.setRowCount(0);
    }
    
    public void linhasColoridas() {
         
         //Seta uma tabela renderizada
         TabelaVendas.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
    @Override // Override do componente de uma tabela renderizada.
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column){
          JLabel label = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        
         Color c = Color.WHITE; // É Setada as linhas como branca, antes da condição das cores.
         label.setBackground(c);
         
         Object texto = TabelaVendas.getValueAt(row, 5);
         String valorObs = (String) TabelaVendas.getValueAt(row, 5);
     
             if(texto != null && !"".equals(texto.toString())){ 
             //JOptionPane.showMessageDialog(this, String.valueOf(texto));
         //    JOptionPane.showMessageDialog(this, valorObs);
               Color cor = Color.YELLOW;
               label.setBackground(cor);     
         
         
             if((valorObs.contains("canc") || valorObs.contains("CANC") || valorObs.contains("Canc"))){
             Color corVermelho = new Color(255,0,0);
             label.setBackground(corVermelho);    
             } 
             if((valorObs.contains("ass") || valorObs.contains("Ass") || valorObs.contains("ASS"))){
              Color corAzul = new Color(51,51,255);
             label.setBackground(corAzul);       
             }
        }        
           return label;            
    }
        
});
}
    
    
    private void valorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_valorKeyPressed
    if(evt.getKeyCode() == KeyEvent.VK_ENTER){
        qtd.requestFocus();
    }
    }//GEN-LAST:event_valorKeyPressed

    private void qtdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtdKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_qtdKeyPressed

    private void obsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_obsKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_obsKeyPressed

    private void btConfirmaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btConfirmaMousePressed
    if(!n_venda.getText().isEmpty()){
    avisos.setText("Erro: Essa venda já foi feita, não é possível realiza-lá!");
    limpaTodosCampos();
    } else {
    finalizaCompra();
    TabelaV();
    }
    }//GEN-LAST:event_btConfirmaMousePressed

    private void finalizaCompra(){
      String valorTel = telefone.getText();
      valorTel = valorTel.replaceAll("-", "");
      ResultSet rs = d.consulta("select telefone from clientes where telefone = '" + valorTel + "'"); //Consulta se o valor digitado já é cadastrado.
      try{
          //Caso algum campo esteja em branco, o usuário é obrigado a preencher todos os campos.
      if(telefone.getText().isEmpty() || endereco.getText().isEmpty() || nome.getText().isEmpty() || bairro.getText().isEmpty()){
                        JOptionPane.showMessageDialog(this, "Preencha todos os campos, porfavor!");
                        telefone.requestFocus();         
           } else {
            if(!rs.next()){// Se o cliente não estiver cadastrado, ele é cadastrado.   
               if(d.insereClientes("clientes", valorTel, endereco.getText(), nome.getText(), bairro.getText())){//Cadastra clientes não cadastrado.
              JOptionPane.showMessageDialog(this, "Cliente cadastrado!");
              Cadastra_AlteraCli cac = new Cadastra_AlteraCli();
              cac.TabelaClientes();
              } else {
              JOptionPane.showMessageDialog(this, "Erro ao cadastrar!");
                       }
          }                
        ResultSet dadosBanco = d.consulta("select nome,endereco,bairro from clientes where telefone = '" + valorTel + "'");
        if(dadosBanco.next()){
        String nomeBanco = dadosBanco.getString("nome");
        String endBanco = dadosBanco.getString("endereco"); // Seta os valores do banco nas Strings nomeBanco,endBanco,bairroBanco.
        String bairroBanco = dadosBanco.getString("bairro");
        String nomeDigitado = nome.getText();
        String endDigitado = endereco.getText(); // Pega os valores digitado pelo usuário.
        String bairroDigitado = bairro.getText();
        
        if(!nomeBanco.equals(nomeDigitado)){ // Se o nome digitado não for igual ao do banco, o nome digitado vai para a tabela clientes.
          d.atualizaClientes("clientes", "nome='"+nomeDigitado+"'","telefone='"+valorTel+"'");
          JOptionPane.showMessageDialog(this, "Nome do cliente alterado no banco.");
        }
        if(!endBanco.equals(endDigitado)){ // Se o endereço digitado não for igual ao do banco, o endereço digitado vai para a tabela clientes.
          d.atualizaClientes("clientes", "endereco='"+endDigitado+"'","telefone='"+valorTel+"'");   
          JOptionPane.showMessageDialog(this, "Endereço do cliente alterado no banco.");
        }
        if(!bairroBanco.equals(bairroDigitado)){ // Se o bairro digitado não for igual ao do banco, o bairro digitado vai para a tabela clientes.
          d.atualizaClientes("clientes", "bairro='"+bairroDigitado+"'","telefone='"+valorTel+"'");   
          JOptionPane.showMessageDialog(this, "Bairro do cliente alterado no banco.");
        }
        }
            
          ResultSet valorP = d.consulta("select valorpadrao from produtos where descricao_prod = '" + comboProduto.getSelectedItem() + "'");
          valorP.next();
                   
      if(valor.getText().isEmpty() && !qtd.getText().isEmpty()){ //Coloca o valor padrão(banco) setado pelo usuário, caso o campo VALOR esteja vázio.    
            valor.setText(valorP.getString("valorpadrao"));
            int valorBanco = valorP.getInt("valorpadrao");
            int quantidadeDigitada = Integer.valueOf(qtd.getText());
            int valorT = valorBanco * quantidadeDigitada;  
            valor.setText(Integer.toString(valorT));
            
        } else if(qtd.getText().isEmpty() && !valor.getText().isEmpty()){ //Coloca 1 de quantidade, caso o campo QUANTIDADE esteja vázio.
                qtd.setText("1");                                         //Também retorna o cálculo do valor total.
                int valorDigitado = Integer.valueOf(valor.getText());
                int quantidadeDigitada = 1;
                int valorT = valorDigitado * quantidadeDigitada;  
                valor.setText(Integer.toString(valorT));
                
        } else if (qtd.getText().isEmpty() && valor.getText().isEmpty()){ //Coloca 1 de quantidade caso o campo Quantidade esteja vázio,
                valor.setText(valorP.getString("valorpadrao"));            //Também coloca o valor padrão(banco) setado pelo usuário, caso o campo
                qtd.setText("1");                                          //VALOR esteja vázio.
                
        } else if (!valor.getText().isEmpty() && !qtd.getText().isEmpty()){ //Se o campo VALOR e o campo QUANTIDADE não estiveram vázios,
               int valorDigitado = Integer.valueOf(valor.getText());        //É realizado o cálculo, retornando o valor total.
               int quantidadeDigitada = Integer.valueOf(qtd.getText());
               int valorT = valorDigitado * quantidadeDigitada;  
               valor.setText(Integer.toString(valorT));
        }

         //Pega o ID do motorista pelo nome no comboBox
         ResultSet comboMoto = d.consulta("select id_motorista from motoristas where nome_motorista = '" + comboMotorista.getSelectedItem() + "'");
         comboMoto.next();
         int cMoto = comboMoto.getInt("id_motorista");
         //Pega o ID do pagamento pelo nome no comboBox
          ResultSet comboPagamento = d.consulta("select id_pgto from forma_pgto where descricao = '" + comboPgto.getSelectedItem() + "'");
         comboPagamento.next();
         int cPgto = comboPagamento.getInt("id_pgto");
         //Pega o ID do produto pelo nome no comboBox
          ResultSet comboProd = d.consulta("select id_produto from produtos where descricao_prod = '" + comboProduto.getSelectedItem() + "'");
         comboProd.next();
         int cProd = comboProd.getInt("id_produto");
         
          // Pega data atual
         String data = new SimpleDateFormat("yyyy-MM-dd").format(Calendar.getInstance().getTime());
          // Pega hora atual
         String hora = new SimpleDateFormat("HH:mm").format(Calendar.getInstance().getTime());   
        
        //Inserção da venda no BANCO.
        if(d.insereVenda("vendas", valorTel, nome.getText(), endereco.getText(), obs.getText(), bairro.getText(), cMoto, data, hora, cProd, valor.getText(), qtd.getText(), cPgto)){
          avisos.setText("Venda efetuada!"); //Caso sucesso na venda.
          TabelaV();
          limpaTodosCampos();
          somaVendas();
          linhasColoridas();
        } else {
          avisos.setText("Erro ao efetuar venda!");//Caso falha na venda. (se o banco não estiver conectado, ou ocorrer outro erro).
        }
    }
            } catch (SQLException e){
          System.out.println(e);
      }
    }
   
    private void rolaScroll() {
	SwingUtilities.invokeLater(new Runnable() {
		public void run() {
		 jScrollPane2.getVerticalScrollBar().setValue(TabelaVendas.getHeight());
		}
	});
}
    
    private void n_vendaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_n_vendaKeyPressed
     if(evt.getKeyCode() == KeyEvent.VK_ENTER){
         retornaVenda();
     }
    }//GEN-LAST:event_n_vendaKeyPressed

    private void btAlteraMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btAlteraMousePressed
        try{
        ResultSet rs = d.consulta("select * from vendas where id_venda = '" + n_venda.getText() + "'");
        if(n_venda.getText().isEmpty()){
            avisos.setText("Porfavor, digite o Código da venda!");
        } else if (!rs.next()){
            avisos.setText("Erro: Número de venda inválido, digite um número válido!");
            n_venda.setText("");
            n_venda.requestFocus();
        } else {
            atualizaVenda();
        }
        } catch (SQLException e){
            System.out.println(e);
        }
    }//GEN-LAST:event_btAlteraMousePressed

    private void limpaTodosCampos(){
        telefone.setText("");
        nome.setText("");
        endereco.setText("");
        bairro.setText("");
        valor.setText("");
        obs.setText("");
        qtd.setText("");
        n_venda.setText("");
    }
    
    private void setIcone(){
        URL caminhoIcone = getClass().getResource("/images/iconeMenuVendas.png");
        Image iconeTitulo = Toolkit.getDefaultToolkit().getImage(caminhoIcone);
        this.setIconImage(iconeTitulo);
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuVendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuVendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuVendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuVendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MenuVendas mv = new MenuVendas();
                mv.setVisible(true);
                mv.setExtendedState(MAXIMIZED_BOTH);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JTable TabelaVendas;
    private javax.swing.JLabel avisos;
    private javax.swing.JTextField bairro;
    private javax.swing.JButton btAltera;
    private javax.swing.JButton btConfirma;
    private javax.swing.JComboBox<String> comboMotorista;
    private javax.swing.JComboBox<String> comboPgto;
    private javax.swing.JComboBox<String> comboProduto;
    private javax.swing.JTextField endereco;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField n_venda;
    private javax.swing.JTextField nome;
    private javax.swing.JTextField obs;
    private javax.swing.JLabel qtVendas;
    private javax.swing.JLabel qtVendas1;
    private javax.swing.JTextField qtd;
    private javax.swing.JTextField telefone;
    private javax.swing.JTextField valor;
    // End of variables declaration//GEN-END:variables
}
